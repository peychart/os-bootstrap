#!/bin/bash
# Instalation du premier noeud openstack.gov.pf Ã  partir d'un system de base
#PE-20140707
SERVICE=doc
MYNAME=${MYNAME:-install-$SERVICE.sh}
MYTMP="/tmp/.$MYNAME.$(date +%Y%m%d.%H%M%S)"
trap "rm -f $MYTMP" 0 1 2 3 5
rouge='\e[0;31m'; vert='\e[0;32m'; jaune='\e[1;33m'; bleu='\e[0;34m'; neutre='\e[0;m';
print() { color=$1; shift; if [ _$(basename $SHELL) = "_bash" ]; then echo -e "${color}$* ${neutre}"; else echo "$*"; fi; }
printstd() { print "${vert}" "$MYNAME: $*"; }
printerr() { print "${rouge}" "$MYNAME: $*" 2>&1; }
printwrn() { print "${jaune}" "$MYNAME: $*"; }
printhlp() { print "${bleu}" "$*"; }
export DEBIAN_FRONTEND=noninteractive

domain=${domain:-doc.os.gov.pf}
source=${source:-/var/opt/gitlab/git-data/gitlab-satellites/root/os-documentation/}
destination=${destination:-/media/cloudfuse/os-documentation/}

# Analyse des arguments:
while getopts hs:d: opt
do case "$opt" in
    s) source="$OPTARG";;
    d) destination="$OPTARG";;
    h|\?) #unknown flag
       printhlp "syntaxe: $MYNAME -s <source> -d <destination> <url>"
       printhlp
       printhlp "eg.  $MYNAME \\"
       printhlp "        -s /var/opt/gitlab/git-data/gitlab-satellites/root/os-documentation/ \\"
       printhlp "        -d /media/cloudfuse/os-documentation/ \\"
       printhlp "         doc.os.gov.pf"
       printhlp
       printhlp "eg.   curl -sfH \"X-Auth-Token: <X_Auth_Token>\" \\"
       printhlp "           <X-Storage-Url>/os-bootstrap/$MYNAME \\"
       printhlp "        | bash -s -- doc.os.gov.pf"
       printhlp
       printhlp "from: curl -is -H \"X-Auth-User: system:root\" \\"
       printhlp "               -H \"X-Auth-Key: testpass\" \\"
       printhlp "               http://swiftauth:8080/auth/v1.0"
       printhlp
       exit 0;;
esac done
shift `expr $OPTIND - 1`
! whoami | grep -qsw root && printerr "must be root to do that..." && exit 1
[ $# -ne 0 ] && domain=$1 && shift
[ $# -ne 0 -o -z "$domain" -o -z "$source" -o -z "$destination" ] \
 && printerr "bad argument... (see: -h)" && exit 1

insertLineInFile() { # syntaxe: $0 "line" fileName [numLine]
 [ -z "$2" -o ! -w $2 ] && return 1
 local n=${3:-0}
 ([ 0$n -ne 0 ] && head -n $(expr $n - 1) <$2) >$MYTMP
 echo "$1" >>$MYTMP
 tail -n +$n <$2 >>$MYTMP
 [ 0$(expr $(wc -l <$2) + 1) -eq 0$(wc -l <$MYTMP) ] \
  && cat <$MYTMP >$2
}


# verification des dependences:
if ! command -v jekyll >/dev/null; then
 ! command -v gitlab-ctl >/dev/null && printerr "gitlab is not installed on this server (procedure aborted)..." && exit 1
 printstd "rubygems install..."
 echo "# *********** Generated by the \"apt_get install node.js\" procedures:" >/tmp/$MYNAME.log
 ! apt-get -q install node.js -y >>/tmp/$MYNAME.log 2>&1 \
   && printerr "node.js install error (see: /tmp/$MYNAME.log)..." && exit 1
#/opt/gitlab/embedded/bin/gem update --no-rdoc --no-ri >>/tmp/gem-$$.log 2>&1
 echo "# *********** Generated by the \"gem_install\" procedures:" >>/tmp/$MYNAME.log
 /opt/gitlab/embedded/bin/gem install rubygems-update --no-rdoc --no-ri >>/tmp/gem-$$.log 2>&1
 /opt/gitlab/embedded/bin/update_rubygems >>/tmp/gem-$$.log 2>&1
 /opt/gitlab/embedded/bin/gem install jekyll --no-rdoc --no-ri >>/tmp/gem-$$.log 2>&1
 ln -sf /opt/gitlab/embedded/bin/jekyll /usr/bin/
 command -v jekyll >/dev/null \
  && printstd "service succefully configured..."
else
 printwrn "service was already installed..."
fi
! command -v jekyll >/dev/null \
 && printwrn "cannot install the service \"$SERVICE\" (procedure aborted)..." && exit 1

# Configure nginx for http://doc.os.gov.pf:
CONFile=/var/opt/gitlab/nginx/etc/nginx.conf
CONFNAME=/var/opt/gitlab/nginx/etc/doc-http.conf
cat > $CONFNAME <<@@@
server {
#  listen 8000;
  server_name $domain;
  server_tokens off;     # don't show the version number, a security best practice
  root $destination;
  index index.html index.htm;

        location / {
                try_files \$uri \$uri/ =404;
                autoindex on;
        }

}
@@@

# and add the include $CONFNAME in nginx.conf:
[ -d /etc/nginx ] || ln -s /var/opt/gitlab/nginx/etc /etc/nginx
if ! grep -Pvs "[ \t]*#" <$CONFile| grep -nsw include| grep -qs $CONFNAME; then
  num=$(grep -nsw include <$CONFile| tail -n 1| cut -d':' -f1)
  if [ 0$num -ne 0 ]; then
     insertLineInFile "  include $CONFNAME;" $CONFile $(expr $num + 1)
  else echo "  include $CONFNAME;" >>$CONFile
  fi
  printstd "nginx succefully configured..."
  gitlab-ctl restart
else
  printwrn "nginx was already configured..."
fi

# add the crontab to buid content:
if ! crontab -l| grep -qs "^[^#].*jekyll "; then
  (crontab -l
   echo "# Refresh http://$domain:"
   echo "33 00 * * *    (cd $source && git pull && chown -R \$(ls -ld .| cut -d' ' -f3):\$(ls -ld .| cut -d' ' -f4) . && /opt/gitlab/embedded/bin/jekyll build -d $destination) >/dev/null 2>&1"
   echo
  )| crontab -
  printstd "cron succefully configured..."
else
  printwrn "cron was already configured..."
fi
 printhlp "$MYNAME: git pull:"
 (cd $source && git pull && chown -R $(ls -ld .| cut -d' ' -f3):$(ls -ld .| cut -d' ' -f4) . && /opt/gitlab/embedded/bin/jekyll build -d $destination) >/dev/null 2>&1 && printstd "$MYNAME: doc updated."


# Do the iptable rules:
CONFile=/etc/iptables.d/filter/INPUT/$SERVICE
mkdir -p $(dirname $CONFile); cat >$CONFile <<@@@
# Dynamic file generated by chef
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
--append INPUT --protocol udp --dport 80 --sport 1024:65535 --match state --state NEW --jump ACCEPT
@@@

printstd "$SERVICE succefully installed."

