#!/bin/bash
# Instalation de gitlab Ã  partir d'un node standard
#PE-20140707
SERVICE=gitlab
MYNAME=${MYNAME:-install-$SERVICE.sh}
MYTMP="/tmp/.$MYNAME.$(date +%Y%m%d.%H%M%S)"
trap "rm -f $MYTMP" 0 1 2 3 5
rouge='\e[0;31m'; vert='\e[0;32m'; jaune='\e[1;33m'; bleu='\e[0;34m'; neutre='\e[0;m';
print() { color=$1; shift; if [ _$(basename $SHELL) = "_bash" ]; then echo -e "${color}$* ${neutre}"; else echo "$*"; fi; }
printstd() { print "${vert}" "$MYNAME: $*"; }
printerr() { print "${rouge}" "$MYNAME: $*" 2>&1; }
printwrn() { print "${jaune}" "$MYNAME: $*"; }
printhlp() { print "${bleu}" "$*"; }
export DEBIAN_FRONTEND=noninteractive

gitlaburl="gitlab.os.gov.pf"
backups=/var/opt/gitlab/backups

# Analyse des arguments:
while getopts hu:s:t: opt
do case "$opt" in
    u) gitlaburl="$OPTARG";;
    s) gitlabsource="$OPTARG";;
    t) X_Auth_Token="$OPTARG";;
    h|\?) #unknown flag
       printhlp "syntaxe: $MYNAME [ -u <server_url> ] [ -s <gitlab_sources> ] [ -t <X_Auth_Token> ] [ <X_Storage_Url> ]"
       printhlp
       printhlp "eg.   $MYNAME -u gitlab.os.gov.pf \\"
       printhlp "        -t <X_Auth_Token> \\"
       printhlp "        -s <X-Storage-Url>/repository/archives/ubuntu-14.04/gitlab_7.0.0-omnibus-1_amd64.deb \\"
       printhlp "        <X_Storage_Url>"
       printhlp
       printhlp "or:   curl -sfH \"X-Auth-Token: <X_Auth_Token>\" \\"
       printhlp "           http://swiftauth:8080/v1/AUTH_system/os-bootstrap/$MYNAME \\"
       printhlp "        | bash -s -- -u gitlab.os.gov.pf \\"
       printhlp "        -t <X_Auth_Token> \\"
       printhlp "        -s http://swiftauth:8080/v1/AUTH_system/repository/archives/ubuntu-14.04/gitlab_7.0.0-omnibus-1_amd64.deb \\"
       printhlp "        <X_Storage_Url>"
       printhlp
       printhlp "from: curl -is -H \"X-Auth-User: system:root\" \\"
       printhlp "               -H \"X-Auth-Key: testpass\" \\"
       printhlp
       exit 0;;
esac done
shift `expr $OPTIND - 1`
! whoami | grep -qsw root && printerr "must be root to do that..." && exit 1
[ $# -ne 0 ] && X_Storage_Url=$1 && shift
[ $# -ne 0 ] || [ ! -z "$X_Auth_Token" -a -z "$X_Storage_Url" ] && printerr "bad argument... (see: -h)" && exit 1

# Verification d'installation de postfix:
[ ! -f /etc/postfix/main.cf ] && printerr "postfix not installed (procedure aborted)..." && exit 1

# installation de gitlab:
if ! command -v gitlab-ctl >/dev/null; then
  # recuperation du package:
  if [ -z "$X_Auth_Token" ]; then
    curl -sfL ${gitlabsource:-"https://downloads-packages.s3.amazonaws.com/ubuntu-14.04/gitlab_7.0.0-omnibus-1_amd64.deb"} >/tmp/gitlab.deb
  else
    curl -sfLH "X-Auth-Token: $X_Auth_Token" ${gitlabsource:-"https://downloads-packages.s3.amazonaws.com/ubuntu-14.04/gitlab_7.0.0-omnibus-1_amd64.deb"} >/tmp/gitlab.deb
  fi
  [ ! -s /tmp/gitlab.deb ] && printerr "$MYNAME: gitlab package not found (procedure aborted)..." && exit 1

  # installation:
  echo "# *********** Generated by the \"install gitlab\" procedures:" >/tmp/$MYNAME.log
  ! apt-get -q install openssh-server -y --force-yes >>/tmp/$MYNAME.log 2>&1 \
    && printerr "install openssh-server error (see: /tmp/$MYNAME.log)..." && exit 1
  ! dpkg --refuse-downgrade -i /tmp/gitlab.deb >>/tmp/$MYNAME.log 2>&1 \
    && printerr "install gitlab error (see: /tmp/$MYNAME.log)..." && exit 1

  mkdir -p /opt/gitlab/embedded/logs

  # configuration:
  cat >/etc/gitlab/gitlab.rb <<@@@
# Change the external_url to the address your users will type in their browser
external_url 'http://$gitlaburl'
@@@
  echo "# *********** Generated by the \"reconfig gitlab\" procedure:" >>/tmp/$MYNAME.log
  ! gitlab-ctl reconfigure  >>/tmp/$MYNAME.log 2>&1 \
    && printerr "reconfiguration gitlab error (see: /tmp/$MYNAME.log)..."

  # Recherche d'une eventuelle sauvegarde:
  printstd "try to find a gitlab backup..."
  rm -f $backups/0_gitlab_backup.tar
  lastone=$(curl -sfH "X-Auth-Token: $X_Auth_Token" $X_Storage_Url/os-backup| egrep "/[0-9]+_gitlab.backup.tar"| tail -n 1)
  [ -z "$lastone" -o -f $backups/0_gitlab_backup.tar ] && backups=""
  if [ ! -z $backups ]; then
    curl -sfH "X-Auth-Token: $X_Auth_Token" $X_Storage_Url/os-backup/$lastone >$backups/0_gitlab_backup.tar
    [ $? -ne 0 -o ! -s $backups/0_gitlab_backup.tar ] && backups=""
  fi

  if [ ! -z "$backups" ]; then
    printstd "$lastone found..."
    printstd '# gitlab data restore:'
    echo "# *********** Generated by the \"restore gitlab\" procedure:" >>/tmp/$MYNAME.log
     if echo yes| gitlab-rake gitlab:backup:restore BACKUP=0 >>/tmp/$MYNAME.log 2>&1; then
       printstd "backup applied"
     else
       printwrn "restore failled..." \
        && printwrn "You'll have to process manually." >&2
     fi
  else
    printwrn "no backup found."
  fi

else
  printwrn "service already installed..."
fi
[ ! -z "$backups" ] && rm -f $backups/0_gitlab_backup.tar


printhlp "$MYNAME: mise en place des crons de la sauvegarde gitlab:"
if ! crontab -l| grep -qs "^[^#].*gitlab-rake gitlab:backup:create;"; then
 (crontab -l
     echo '# gitlab backup:'
     echo '05 00 * * *  (/usr/bin/gitlab-rake gitlab:backup:create; mv -f '$backups'/* /media/cloudfuse/os-backup/gitlab.backups/) >/dev/null 2>&1'
     echo
  )| crontab -
  printstd "cron succefully configured..."
else
  printwrn "cron was already configured..."
fi


# Do the iptable rules:
mkdir -p /etc/iptables.d/; cat >/etc/iptables.d/$SERVICE <<@@@
# Dynamic file generated by chef
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

-A INPUT -p tcp --dport 80,8080 -j ACCEPT
@@@

printstd "$SERVICE succefully installed."

