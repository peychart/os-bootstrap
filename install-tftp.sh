#!/bin/bash
# Instalation du premier noeud openstack.gov.pf Ã  partir d'un system de base
#PE-20140707
SERVICE=tftp
MYNAME=${MYNAME:-install-$SERVICE.sh}
MYTMP="/tmp/.$MYNAME.$(date +%Y%m%d.%H%M%S)"
trap "rm -f $MYTMP" 0 1 2 3 5
rouge='\e[0;31m'; vert='\e[0;32m'; jaune='\e[1;33m'; bleu='\e[0;34m'; neutre='\e[0;m';
print() { color=$1; shift; if [ _$(basename $SHELL) = "_bash" ]; then echo -e "${color}$* ${neutre}"; else echo "$*"; fi; }
printstd() { print "${vert}" "$MYNAME: $*"; }
printerr() { print "${rouge}" "$MYNAME: $*" 2>&1; }
printwrn() { print "${jaune}" "$MYNAME: $*"; }
printhlp() { print "${bleu}" "$*"; }
export DEBIAN_FRONTEND=noninteractive

tftpboot=${tftpboot:-"/tftpboot"}
snmp_community=${snmp_community-="NOT_SETTLED"}

# Analyse des arguments:
while getopts c:h opt
do case "$opt" in
    c) snmp_community="$OPTARG";;
    h|\?) #unknown flag
       printhlp "syntaxe: $MYNAME [ -c 'community_name' ] tftp_root"
       printhlp
       printhlp "eg.   $MYNAME -c my_community /tftpboot"
       printhlp
       printhlp "or:   curl -sfH \"X-Auth-Token: <X_Auth_Token>\" \\"
       printhlp "           <X-Storage-Url>/os-bootstrap/$MYNAME \\"
       printhlp "        | bash -s -- -c my_community /tftpboot"
       printhlp
       printhlp "from: curl -is -H \"X-Auth-User: system:root\" \\"
       printhlp "               -H \"X-Auth-Key: testpass\" \\"
       printhlp "               http://swiftauth:8080/auth/v1.0"
       printhlp
       exit 0;;
esac done
shift `expr $OPTIND - 1`
! whoami | grep -qsw root && printerr "must be root to do that..." && exit 1
[ $# -ne 0 ] && tftpboot=$1 && shift
[ $# -ne 0 -o -z "$tftpboot" ] && printerr "bad argument... (see: -h)" && exit 1

# install the tftp server:
echo "# *********** Generated by the \"apt_get install tftpd\" procedure:" >/tmp/$MYNAME.log
! apt-get -q install tftpd xinetd -y --force-yes >>/tmp/$MYNAME.log 2>&1 \
  && printerr "tftpd install error (see: /tmp/$MYNAME.log)..." && exit 1
mkdir -p $tftpboot; chown nobody $tftpboot; chmod 777 $tftpboot
if ! grep -s server_args /etc/xinetd.d/tftp| grep -qs $tftpboot; then
  cat >/etc/xinetd.d/tftp <<@@@
service tftp
{
protocol        = udp
port            = 69
socket_type     = dgram
wait            = yes
user            = nobody
server          = /usr/sbin/in.tftpd
server_args     = $tftpboot
disable         = no
}
@@@
  printstd "service succefully configured..."
else
  printwrn "service was already configured..."
fi


printhlp '# mise en place des crons de la sauvegarde des cisco-devices:'
echo "# *********** Generated by the \"apt_get install snmp\" procedure:" >/tmp/$MYNAME.log
! apt-get -q install snmp -y --force-yes >>/tmp/$MYNAME.log 2>&1 \
  && printerr "snmp install error (see: /tmp/$MYNAME.log)..." && exit 1
curl -sfL http://gitlab.os.gov.pf/root/snmpciscobackup/raw/master/cisco.backup.sh \
  | bash -s -- -s /media/cloudfuse/os-backup/cisco.conf/
printstd "$(ls $tftpboot/* 2>/dev/null|wc -l) backup definition(s) settled in $tftpboot..."
if ! crontab -l| grep -qs "^[^#].*cisco.backup.sh"; then
  (crontab -l
   echo '# Backup of cisco/hp devices:'
   echo '00 00 * * *    ROOT=/media/cloudfuse/os-backup; curl -sfL http://gitlab.os.gov.pf/root/snmpciscobackup/raw/master/cisco.backup.sh| /bin/bash -s -- -c '$snmp_community' -d '$tftpboot'| while read i; do cp -f '$tftpboot'/$i $ROOT/cisco.conf/$i.$(date "+\\%Y\\%m\\%d.\\%H\\%M") 2>/dev/null; done; cd '$tftpboot'/ && [ -d .git ] && (git add *.conf && git commit -m "New backups" && git push) >/dev/null 2>&1'
   echo
  )| crontab -
  printstd "cron succefully configured..."
else
  printwrn "cron was already configured..."
fi


# Do the iptable rules:
mkdir -p /etc/iptables.d/; cat >/etc/iptables.d/$SERVICE <<@@@
# Dynamic file generated by chef
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

-A INPUT -p udp --dport 69 -j ACCEPT
@@@

printstd "$SERVICE succefully installed."

